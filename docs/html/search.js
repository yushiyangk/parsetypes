window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"parsetypes": {"fullname": "parsetypes", "modulename": "parsetypes", "kind": "module", "doc": "<p>This package provides tools for parsing serialised data to recover their original underlying types.</p>\n\n<p>The <code>TypeParser</code> class provides configurable type inference and parsing. This can be initialised with different settings to, for example:</p>\n\n<ul>\n<li>treat <code>inf</code> as either a float or a normal string</li>\n<li>give exact Decimal values instead of floats</li>\n<li>detect inline lists</li>\n</ul>\n"}, "parsetypes.TypeParser": {"fullname": "parsetypes.TypeParser", "modulename": "parsetypes", "qualname": "TypeParser", "kind": "class", "doc": "<p>A parser that can be used to infer the underlying types of data serialised as strings, and to convert them into their original underlying types.</p>\n\n<p>Instances of this class can be configured with different settings for the parser and inferrer. See the constructor for more details about the available options.</p>\n"}, "parsetypes.TypeParser.__init__": {"fullname": "parsetypes.TypeParser.__init__", "modulename": "parsetypes", "qualname": "TypeParser.__init__", "kind": "function", "doc": "<p>Initialise a new parser</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>trim</code>\n: whether leading and trailing whitespace should be stripped from strings</p>\n\n<p><code>use_decimal</code>\n: whether non-integer numeric values should be inferred as Decimal (exact values) instead of float (non-exact values). Note that this only applies to methods that attempt to infer type (<code>infer()</code> and <code>infer_*()</code>), and does not affect methods where the type is explicitly specified (<code>is_float()</code>, <code>is_decimal()</code>, <code>parse_float()</code>, <code>parse_decimal()</code>).</p>\n\n<p><code>list_delimiter</code>\n: the delimiter used for identifying lists and for separating list items. If set to None, the parser will not attempt to identify lists when inferring types, which usually causes the value to be treated as a str instead.</p>\n\n<p><code>none_values</code>\n: list of strings that represent the value None</p>\n\n<p><code>none_case_sensitive</code>\n: whether matches against <code>none_values</code> should be made in a case-sensitive manner</p>\n\n<p><code>true_values</code>\n: list of strings that represent the bool value True</p>\n\n<p><code>false_values</code>\n: list of strings that represent the bool value False</p>\n\n<p><code>bool_case_sensitive</code>\n: whether matches against <code>true_values</code> and <code>false_values</code> should be made in a case-sensitive manner</p>\n\n<p><code>int_case_sensitive</code>\n: whether checks for int should be done in a case-sensitive manner. This usually only applies to values given in scientific notation, where the mantissa and exponent usually are separated by <code>e</code>.</p>\n\n<p><code>inf_values</code>\n: list of strings that represent the float or Decimal value of infinity. Each of the strings can be prepended with a negative sign to represent negative infinity also.</p>\n\n<p><code>nan_values</code>\n: list of strings that represent a float or Decimal that is NaN (not a number)</p>\n\n<p><code>float_case_sensitive</code>\n: whether checks for float should be done in a case-sensitive manner. This applies to matches against <code>inf_values</code> and <code>nan_values</code>, as well as to values given in scientific notation, where the mantissa and exponent are usually separated by <code>e</code>.</p>\n\n<p><code>case_sensitive</code>\n: whether all matches should be made in a case-sensitive manner. Sets all of <code>none_case_sensitive</code>, <code>bool_case_sensitive</code>, <code>int_case_sensitive</code>, <code>float_case_sensitive</code> to the same value, ignoring any individual settings.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p><code>ValueError</code> if any of the options would lead to ambiguities during parsing</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">trim</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">use_decimal</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">list_delimiter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">none_values</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">none_case_sensitive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">true_values</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;true&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">false_values</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;false&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">bool_case_sensitive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">int_case_sensitive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">inf_values</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">nan_values</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">float_case_sensitive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">case_sensitive</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "parsetypes.TypeParser.is_none": {"fullname": "parsetypes.TypeParser.is_none", "modulename": "parsetypes", "qualname": "TypeParser.is_none", "kind": "function", "doc": "<p>Check if a string represents the value None</p>\n\n<p>Only strings that match the values in <code>self.none_values</code> will be interpreted as None. The default accepted values are <code>[\"\"]</code>, i.e. an empty string. The case sensitivity of this matching depends on <code>self.none_case_sensitive</code>, which is False by default.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>value</code>\n: string to be checked</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>whether it is None</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_bool</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>     <span class=\"c1\"># True</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_bool</span><span class=\"p\">(</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.is_bool": {"fullname": "parsetypes.TypeParser.is_bool", "modulename": "parsetypes", "qualname": "TypeParser.is_bool", "kind": "function", "doc": "<p>Check if a string represents a bool</p>\n\n<p>Only strings that match the values in <code>self.true_values</code> and <code>self.false_values</code> will be interpreted as booleans. The default accepted values are <code>[\"true\"]</code> and <code>[\"false\"]</code> respectively. The case sensitivity of this matching depends on <code>self.bool_case_sensitive</code>, which is False by default.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>value</code>\n: string to be checked</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>whether it is a bool</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">is_bool</span><span class=\"p\">(</span><span class=\"s2\">&quot;true&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># True</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">is_bool</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>      <span class=\"c1\"># True</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">is_bool</span><span class=\"p\">(</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">)</span>   <span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.is_int": {"fullname": "parsetypes.TypeParser.is_int", "modulename": "parsetypes", "qualname": "TypeParser.is_int", "kind": "function", "doc": "<p>Check if a string represents an int</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>value</code>\n: string to be checked</p>\n\n<p><code>allow_negative</code>\n: whether to accept negative values</p>\n\n<p><code>allow_sign</code>\n: whether to accept signed values. If False, it implies that <code>allow_negative</code> is False also.</p>\n\n<p><code>allow_scientific</code>\n: whether to accept scientific notation. If True, strings of the form <code>\"<var>M</var>e<var>X</var>\"</code> will be interpreted as the expression <code><var>M</var> * (10 <em>* <var>X</var>)</code>, where <var>M</var> is the mantissa/significand and <var>X</var> is the exponent. Note <var>M</var> *must</em> be an integer and <var>X</var> <em>must</em> be a non-negative integer, even in cases where the above expression evaluates mathematically to an integer.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>whether it is an int</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">is_int</span><span class=\"p\">(</span><span class=\"s2\">&quot;0&quot;</span><span class=\"p\">)</span>    <span class=\"c1\"># True</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">is_int</span><span class=\"p\">(</span><span class=\"s2\">&quot;-1&quot;</span><span class=\"p\">)</span>   <span class=\"c1\"># True</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">is_int</span><span class=\"p\">(</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># False</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">is_int</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>     <span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">allow_sign</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">allow_negative</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">allow_scientific</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.is_float": {"fullname": "parsetypes.TypeParser.is_float", "modulename": "parsetypes", "qualname": "TypeParser.is_float", "kind": "function", "doc": "<p>Check if a string represents a float (or equivalently, a Decimal)</p>\n\n<p>This function will also return True if the string represents an int.</p>\n\n<p>Alias: <code>is_decimal()</code></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>value</code>\n: string to be checked</p>\n\n<p><code>allow_scientific</code>\n: whether to accept scientific notation. If True, strings of the form <code>\"<var>M</var>e<var>X</var>\"</code> will be interpreted as the expression <code><var>M</var> * (10 ** <var>X</var>)</code>, where <var>M</var> is the mantissa/significand and <var>X</var> is the exponent. Note that <var>X</var> must be an integer, but can be negative.</p>\n\n<p><code>allow_inf</code>\n: whether to accept positive and negative infinity values. If True, strings that match the values in <code>self.inf_values</code> (empty by default) are interpreted as infinity, or as negative infinity if prepended by a negative sign. The case sensitivity of this matching depends on <code>self.float_case_sensitive</code>, which is False by default.</p>\n\n<p><code>allow_nan</code>\n: whether to accept NaN (not a number) representations. If True, strings that match the values in <code>self.nan_values</code> (empty by default) are interpeted as NaN. The case sensitivity of this matching depends on <code>self.float_case_sensitive</code>, which is False by default.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>whether it is a float or Decimal</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">is_float</span><span class=\"p\">(</span><span class=\"s2\">&quot;1.&quot;</span><span class=\"p\">)</span>       <span class=\"c1\"># True</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">is_float</span><span class=\"p\">(</span><span class=\"s2\">&quot;12.3e-2&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># True</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">is_float</span><span class=\"p\">(</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">)</span>      <span class=\"c1\"># False</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">is_float</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>         <span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">allow_scientific</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">allow_inf</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">allow_nan</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.is_decimal": {"fullname": "parsetypes.TypeParser.is_decimal", "modulename": "parsetypes", "qualname": "TypeParser.is_decimal", "kind": "function", "doc": "<p>Alias of <code>is_float()</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">allow_scientific</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">allow_inf</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">allow_nan</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.parse_none": {"fullname": "parsetypes.TypeParser.parse_none", "modulename": "parsetypes", "qualname": "TypeParser.parse_none", "kind": "function", "doc": "<p>Parse a string and return it as the value None if possible</p>\n\n<p>Only strings that match the values in <code>self.none_values</code> will be interpreted as None. The default accepted values are <code>[\"\"]</code>, i.e. an empty string. The case sensitivity of this matching depends on <code>self.none_case_sensitive</code>, which is False by default.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>value</code>\n: string to be parsed</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>parsed None value</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p><code>ValueError</code> if <code>value</code> cannot be parsed</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_bool</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>     <span class=\"c1\"># None</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_bool</span><span class=\"p\">(</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># raises ValueError</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.parse_bool": {"fullname": "parsetypes.TypeParser.parse_bool", "modulename": "parsetypes", "qualname": "TypeParser.parse_bool", "kind": "function", "doc": "<p>Parse a string and return it as a bool if possible</p>\n\n<p>Only strings that match the values in <code>self.true_values</code> and <code>self.false_values</code> will be interpreted as booleans. The default accepted values are <code>[\"true\"]</code> and <code>[\"false\"]</code> respectively. The case sensitivity of this matching depends on <code>self.bool_case_sensitive</code>, which is False by default.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>value</code>\n: string to be parsed</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>parsed bool value</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p><code>ValueError</code> if <code>value</code> cannot be parsed</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_bool</span><span class=\"p\">(</span><span class=\"s2\">&quot;true&quot;</span><span class=\"p\">)</span>   <span class=\"c1\"># True</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_bool</span><span class=\"p\">(</span><span class=\"s2\">&quot;FALSE&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.parse_int": {"fullname": "parsetypes.TypeParser.parse_int", "modulename": "parsetypes", "qualname": "TypeParser.parse_int", "kind": "function", "doc": "<p>Parse a string and return it as an int if possible</p>\n\n<p>If the string represents a bool, it will be converted to <code>1</code> for True and <code>0</code> for False.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>value</code>\n: string to be parsed</p>\n\n<p><code>allow_scientific</code>\n: whether to accept scientific notation. If True, strings of the form <code>\"<var>M</var>e<var>X</var>\"</code> will be interpreted as the expression <code><var>M</var> * (10 <em>* <var>X</var>)</code>, where <var>M</var> is the mantissa/significand and <var>X</var> is the exponent. Note <var>M</var> *must</em> be an integer and <var>X</var> <em>must</em> be a non-negative integer, even in cases where the above expression evaluates mathematically to an integer.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>parsed int value</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p><code>ValueError</code> if <code>value</code> cannot be parsed</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_int</span><span class=\"p\">(</span><span class=\"s2\">&quot;0&quot;</span><span class=\"p\">)</span>    <span class=\"c1\"># 0</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_int</span><span class=\"p\">(</span><span class=\"s2\">&quot;-1&quot;</span><span class=\"p\">)</span>   <span class=\"c1\"># -1</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_int</span><span class=\"p\">(</span><span class=\"s2\">&quot;2e3&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># 2000</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">allow_scientific</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.parse_float": {"fullname": "parsetypes.TypeParser.parse_float", "modulename": "parsetypes", "qualname": "TypeParser.parse_float", "kind": "function", "doc": "<p>Parse a string and return it as a (non-exact) float if possible</p>\n\n<p>If the string represents a bool, it will be converted to <code>1.</code> for True and <code>0.</code> for False. If the string represents an int, it will be converted to a float also.</p>\n\n<p>Behaves analogously to <code>parse_decimal()</code>, except that that returns an exact Decimal instead.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>value</code>\n: string to be parsed</p>\n\n<p><code>allow_scientific</code>\n: whether to accept scientific notation. If True, strings of the form <code>\"<var>M</var>e<var>X</var>\"</code> will be interpreted as the expression <code><var>M</var> * (10 ** <var>X</var>)</code>, where <var>M</var> is the mantissa/significand and <var>X</var> is the exponent. Note that <var>X</var> must be an integer, but can be negative.</p>\n\n<p><code>allow_inf</code>\n: whether to accept positive and negative infinity values. If True, strings that match the values in <code>self.inf_values</code> (empty by default) are interpreted as infinity, or as negative infinity if prepended by a negative sign. The case sensitivity of this matching depends on <code>self.float_case_sensitive</code>, which is False by default.</p>\n\n<p><code>allow_nan</code>\n: whether to accept NaN (not a number) representations. If True, strings that match the values in <code>self.nan_values</code> (empty by default) are interpeted as NaN. The case sensitivity of this matching depends on <code>self.float_case_sensitive</code>, which is False by default.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>parsed float value</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p><code>ValueError</code> if <code>value</code> cannot be parsed</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">(</span><span class=\"n\">inf_values</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;inf&quot;</span><span class=\"p\">],</span> <span class=\"n\">nan_values</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;nan&quot;</span><span class=\"p\">])</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_float</span><span class=\"p\">(</span><span class=\"s2\">&quot;1.&quot;</span><span class=\"p\">)</span>       <span class=\"c1\"># 1.</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_float</span><span class=\"p\">(</span><span class=\"s2\">&quot;1.23e2&quot;</span><span class=\"p\">)</span>   <span class=\"c1\"># 123.</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_float</span><span class=\"p\">(</span><span class=\"s2\">&quot;1.23e-2&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># 0.0123</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_float</span><span class=\"p\">(</span><span class=\"s2\">&quot;inf&quot;</span><span class=\"p\">)</span>      <span class=\"c1\"># math.inf</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">allow_scientific</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">allow_inf</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">allow_nan</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.parse_decimal": {"fullname": "parsetypes.TypeParser.parse_decimal", "modulename": "parsetypes", "qualname": "TypeParser.parse_decimal", "kind": "function", "doc": "<p>Parse a string and return it as an exact Decimal if possible</p>\n\n<p>If the string represents a bool, it will be converted to <code>Decimal(1)</code> for True and <code>Decimal(0)</code> for False. If the string represents an int, it will be converted to a Decimal also.</p>\n\n<p>Behaves analogously to <code>parse_float()</code>, except that that returns a non-exact float instead.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>value</code>\n: string to be parsed</p>\n\n<p><code>allow_scientific</code>\n: whether to accept scientific notation. If True, strings of the form <code>\"<var>M</var>e<var>X</var>\"</code> will be interpreted as the expression <code><var>M</var> * (10 ** <var>X</var>)</code>, where <var>M</var> is the mantissa/significand and <var>X</var> is the exponent. Note that <var>X</var> must be an integer, but can be negative.</p>\n\n<p><code>allow_inf</code>\n: whether to accept positive and negative infinity values. If True, strings that match the values in <code>self.inf_values</code> (empty by default) are interpreted as infinity, or as negative infinity if prepended by a negative sign. The case sensitivity of this matching depends on <code>self.float_case_sensitive</code>, which is False by default.</p>\n\n<p><code>allow_nan</code>\n: whether to accept NaN (not a number) representations. If True, strings that match the values in <code>self.nan_values</code> (empty by default) are interpeted as NaN. The case sensitivity of this matching depends on <code>self.float_case_sensitive</code>, which is False by default.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>parsed Decimal value</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p><code>ValueError</code> if <code>value</code> cannot be parsed</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">(</span><span class=\"n\">inf_values</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;inf&quot;</span><span class=\"p\">],</span> <span class=\"n\">nan_values</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;nan&quot;</span><span class=\"p\">])</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_decimal</span><span class=\"p\">(</span><span class=\"s2\">&quot;1.&quot;</span><span class=\"p\">)</span>       <span class=\"c1\"># Decimal(1)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_decimal</span><span class=\"p\">(</span><span class=\"s2\">&quot;1.23e2&quot;</span><span class=\"p\">)</span>   <span class=\"c1\"># Decimal(123)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_decimal</span><span class=\"p\">(</span><span class=\"s2\">&quot;1.23e-2&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># Decimal(123) / Decimal(10000)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_decimal</span><span class=\"p\">(</span><span class=\"s2\">&quot;inf&quot;</span><span class=\"p\">)</span>      <span class=\"c1\"># Decimal(math.inf)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">allow_scientific</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">allow_inf</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">allow_nan</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.infer": {"fullname": "parsetypes.TypeParser.infer", "modulename": "parsetypes", "qualname": "TypeParser.infer", "kind": "function", "doc": "<p>Infer the underlying type of a string</p>\n\n<p>Also check for inline lists if <code>self.list_delimiter</code> is not None.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>value</code>\n: the string for which the type should be inferred</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>inferred type</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">infer</span><span class=\"p\">(</span><span class=\"s2\">&quot;true&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># bool</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">infer</span><span class=\"p\">(</span><span class=\"s2\">&quot;2.0&quot;</span><span class=\"p\">)</span>   <span class=\"c1\"># float</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">infer</span><span class=\"p\">(</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">)</span>   <span class=\"c1\"># str</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">parsetypes</span><span class=\"o\">.</span><span class=\"n\">_common</span><span class=\"o\">.</span><span class=\"n\">Nullable</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.infer_series": {"fullname": "parsetypes.TypeParser.infer_series", "modulename": "parsetypes", "qualname": "TypeParser.infer_series", "kind": "function", "doc": "<p>Infer the underlying common type of a series of strings</p>\n\n<p>If the values in the series do not have the same apparent type, the resulting type will be narrowest possible type that will encompass all values in the series. See <code>parsetypes.reduce_types()</code> for more information.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>values</code>\n: series of strings for which the type should be inferred</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>inferred type</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">infer_series</span><span class=\"p\">([</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;3.4&quot;</span><span class=\"p\">])</span>       <span class=\"c1\"># float</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">infer_series</span><span class=\"p\">([</span><span class=\"s2\">&quot;true&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;false&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">])</span>  <span class=\"c1\"># int</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">infer_series</span><span class=\"p\">([</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2.3&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">])</span>     <span class=\"c1\"># str</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">parsetypes</span><span class=\"o\">.</span><span class=\"n\">_common</span><span class=\"o\">.</span><span class=\"n\">Nullable</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.infer_table": {"fullname": "parsetypes.TypeParser.infer_table", "modulename": "parsetypes", "qualname": "TypeParser.infer_table", "kind": "function", "doc": "<p>Infer the underlying common type for each column of a table of strings</p>\n\n<p>For each column, if the values do not have the same apparent type, the resulting type will be narrowest possible type that will encompass all values in the column. See <code>parsetypes.reduce_types()</code> for more information.</p>\n\n<p>Note that the individual inferred types of every value in the table must be able to fit into memory.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>rows</code>\n: table of strings for which the types should be inferred, in row-major order</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>inferred types</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">infer_table</span><span class=\"p\">([</span>\n        <span class=\"p\">[</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>   <span class=\"s2\">&quot;true&quot;</span><span class=\"p\">,</span>  <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s2\">&quot;2&quot;</span><span class=\"p\">,</span>   <span class=\"s2\">&quot;false&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2.3&quot;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s2\">&quot;3.4&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">,</span>     <span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">])</span>\n<span class=\"c1\"># [float, int, str]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rows</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">parsetypes</span><span class=\"o\">.</span><span class=\"n\">_common</span><span class=\"o\">.</span><span class=\"n\">Nullable</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.convert": {"fullname": "parsetypes.TypeParser.convert", "modulename": "parsetypes", "qualname": "TypeParser.convert", "kind": "function", "doc": "<p>Convert a string to the specified target type if possible</p>\n\n<p>Valid values for <code>target_type</code> include any return value from <code>infer()</code>, <code>infer_series()</code> and <code>infer_table()</code>. To infer and convert the string automatically, use <code>parse()</code>, <code>parse_series()</code> or <code>parse_table()</code> instead.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>value</code>\n: the string to be converted</p>\n\n<p><code>target_type</code>\n: type to which the value should be converted</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>converted value</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p><code>ValueError</code>\n: if <code>value</code> cannot be converted to <code>target_type</code></p>\n\n<p><code>TypeError</code>\n: if <code>target_type</code> is not a valid type</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"s2\">&quot;true&quot;</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">)</span>  <span class=\"c1\"># True</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"s2\">&quot;2&quot;</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>      <span class=\"c1\"># 2</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"s2\">&quot;2&quot;</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)</span>    <span class=\"c1\"># 2.</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">target_type</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">parsetypes</span><span class=\"o\">.</span><span class=\"n\">_common</span><span class=\"o\">.</span><span class=\"n\">Nullable</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.parse": {"fullname": "parsetypes.TypeParser.parse", "modulename": "parsetypes", "qualname": "TypeParser.parse", "kind": "function", "doc": "<p>Parse a string and convert it to its underlying type</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>value</code>\n: the string to be parsed</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>converted value</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">&quot;true&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># True</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">&quot;2.0&quot;</span><span class=\"p\">)</span>   <span class=\"c1\"># 2.</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">)</span>   <span class=\"c1\"># &quot;abc&quot;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.parse_series": {"fullname": "parsetypes.TypeParser.parse_series", "modulename": "parsetypes", "qualname": "TypeParser.parse_series", "kind": "function", "doc": "<p>Parse a series of strings and convert them to their underlying common type</p>\n\n<p>If the values in the series do not have the same apparent type, the common type is taken as the narrowest possible type that will encompass all values in the series. See <code>parsetypes.reduce_types()</code> for more information.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>values</code>\n: series of strings to be parsed</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>converted values</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_series</span><span class=\"p\">([</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;3&quot;</span><span class=\"p\">])</span>        <span class=\"c1\"># [1, 2, 3]</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_series</span><span class=\"p\">([</span><span class=\"s2\">&quot;5&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;6.7&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;8.&quot;</span><span class=\"p\">])</span>     <span class=\"c1\"># [5., 6.7, 8.]</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_series</span><span class=\"p\">([</span><span class=\"s2\">&quot;true&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;false&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">])</span>  <span class=\"c1\"># [True, False, None]</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_series</span><span class=\"p\">([</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2.3&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">])</span>    <span class=\"c1\"># [&quot;1&quot;, &quot;2.3&quot;, &quot;abc&quot;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.parse_table": {"fullname": "parsetypes.TypeParser.parse_table", "modulename": "parsetypes", "qualname": "TypeParser.parse_table", "kind": "function", "doc": "<p>Parse a table of strings and convert them to the underlying common type of each column</p>\n\n<p>For each column, if the values do not have the same apparent type, the common type is taken as the narrowest possible type that will encompass all values in the column. See <code>parsetypes.reduce_types()</code> for more information.</p>\n\n<p>Note that the type to which the values should be converted is determined by <code>infer_table()</code>, and so the individual inferred types of every value in the table must be able to fit into memory.</p>\n\n<p>This is a function that computes the entire table and returns it all at once. The generator <code>iterate_table()</code> behaves analogously, except that it computes and yields each row one at a time.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>rows</code>\n: table of strings to be parsed, in row-major order</p>\n\n<p><code>iterator</code>\n: whether the parsed values should be yielded as an iterator. If False, which is the default, the entire table is computed and returned as a list of lists. If True, this function behaves as a generator, and the rows of the table are computed and yielded one at a time. However, note that even when set to True, the type inference requires that inferred type of each individual value must all be able to fit into memory at once.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>converted table of values, in row-major order</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">()</span>\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_table</span><span class=\"p\">([</span>\n        <span class=\"p\">[</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;5&quot;</span><span class=\"p\">,</span>   <span class=\"s2\">&quot;true&quot;</span><span class=\"p\">,</span>  <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s2\">&quot;2&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;6.7&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;false&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2.3&quot;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s2\">&quot;3&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;8.0&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>      <span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">]):</span>\n<span class=\"k\">assert</span> <span class=\"n\">table</span> <span class=\"o\">==</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">5.</span><span class=\"p\">,</span>  <span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mf\">6.7</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2.3&quot;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mf\">8.</span><span class=\"p\">,</span>  <span class=\"kc\">None</span><span class=\"p\">,</span>  <span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rows</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "parsetypes.TypeParser.iterate_table": {"fullname": "parsetypes.TypeParser.iterate_table", "modulename": "parsetypes", "qualname": "TypeParser.iterate_table", "kind": "function", "doc": "<p>Parse a table of strings for the underlying common type of each column, then convert and yield each row</p>\n\n<p>For each column, if the values do not have the same apparent type, the common type is taken as the narrowest possible type that will encompass all values in the column. See <code>parsetypes.reduce_types()</code> for more information.</p>\n\n<p>This is a generator that computes and yields each row one at a time. The function <code>parse_table()</code> behaves analogously, except that it computes the entire table and returns it as a list of lists. However, note that although this is a generator, the type to which the value sshould be converted is still determined by <code>infer_table()</code>, and so the individual inferred types of every value in the table must be able to fit into memory.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>rows</code>\n: table of strings to be parsed, in row-major order</p>\n\n<h2 id=\"yields\">Yields</h2>\n\n<p>each row of converted table values</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">TypeParser</span><span class=\"p\">()</span>\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">iterate_table</span><span class=\"p\">([</span>\n        <span class=\"p\">[</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>   <span class=\"s2\">&quot;true&quot;</span><span class=\"p\">,</span>  <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s2\">&quot;2&quot;</span><span class=\"p\">,</span>   <span class=\"s2\">&quot;false&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2.3&quot;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s2\">&quot;3.4&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">,</span>     <span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">]):</span>\n<span class=\"k\">assert</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mf\">1.</span><span class=\"p\">,</span>  <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mf\">2.</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2.3&quot;</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mf\">3.4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rows</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "parsetypes.reduce_types": {"fullname": "parsetypes.reduce_types", "modulename": "parsetypes", "qualname": "reduce_types", "kind": "function", "doc": "<p>Reduce multiple types into a single common type.</p>\n\n<p>If the input types are not all the same, the resulting type will be narrowest possible type that will encompass all of the input types.</p>\n\n<p>This operation is useful in cases such as parsing a CSV file where each column should have a consistent type, but where the individual values in a column could be interpreted variously as ints or floats (or other types).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>types</code>\n: types to be reduced</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>common reduced type</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">reduce_types</span><span class=\"p\">([</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">])</span>        <span class=\"c1\"># float</span>\n<span class=\"n\">reduce_types</span><span class=\"p\">([</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">])</span>         <span class=\"c1\"># int</span>\n<span class=\"n\">reduce_types</span><span class=\"p\">([</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">])</span>   <span class=\"c1\"># str</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">types</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">parsetypes</span><span class=\"o\">.</span><span class=\"n\">_common</span><span class=\"o\">.</span><span class=\"n\">Nullable</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">parsetypes</span><span class=\"o\">.</span><span class=\"n\">_common</span><span class=\"o\">.</span><span class=\"n\">Nullable</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}}, "docInfo": {"parsetypes": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 72}, "parsetypes.TypeParser": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 56}, "parsetypes.TypeParser.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 325, "bases": 0, "doc": 475}, "parsetypes.TypeParser.is_none": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 161}, "parsetypes.TypeParser.is_bool": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 195}, "parsetypes.TypeParser.is_int": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 289}, "parsetypes.TypeParser.is_float": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 383}, "parsetypes.TypeParser.is_decimal": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 9}, "parsetypes.TypeParser.parse_none": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 180}, "parsetypes.TypeParser.parse_bool": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 188}, "parsetypes.TypeParser.parse_int": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 270}, "parsetypes.TypeParser.parse_float": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 473}, "parsetypes.TypeParser.parse_decimal": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 94, "bases": 0, "doc": 483}, "parsetypes.TypeParser.infer": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 94, "bases": 0, "doc": 151}, "parsetypes.TypeParser.infer_series": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 100, "bases": 0, "doc": 244}, "parsetypes.TypeParser.infer_table": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 118, "bases": 0, "doc": 256}, "parsetypes.TypeParser.convert": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 153, "bases": 0, "doc": 257}, "parsetypes.TypeParser.parse": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 137}, "parsetypes.TypeParser.parse_series": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 88, "bases": 0, "doc": 308}, "parsetypes.TypeParser.parse_table": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 96, "bases": 0, "doc": 548}, "parsetypes.TypeParser.iterate_table": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 91, "bases": 0, "doc": 456}, "parsetypes.reduce_types": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 160, "bases": 0, "doc": 188}}, "length": 22, "save": true}, "index": {"qualname": {"root": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.is_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 20}}}}}}, "s": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}, "t": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}}, "df": 2}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.is_decimal": {"tf": 1}}, "df": 5}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}}, "df": 2}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"parsetypes.TypeParser.is_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 2}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}}, "df": 8}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.convert": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}}}}}}}, "fullname": {"root": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}}, "df": 8, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.is_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 22}}}}}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.is_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 20}}}}}}, "s": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}, "t": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}}, "df": 2}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.is_decimal": {"tf": 1}}, "df": 5}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}}, "df": 2}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"parsetypes.TypeParser.is_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.convert": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}}}}}}}, "annotation": {"root": {"docs": {}, "df": 0}}, "default_value": {"root": {"docs": {}, "df": 0}}, "signature": {"root": {"3": {"9": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2.449489742783178}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"parsetypes.TypeParser.__init__": {"tf": 16.1245154965971}, "parsetypes.TypeParser.is_none": {"tf": 4.47213595499958}, "parsetypes.TypeParser.is_bool": {"tf": 4.47213595499958}, "parsetypes.TypeParser.is_int": {"tf": 8.54400374531753}, "parsetypes.TypeParser.is_float": {"tf": 8.54400374531753}, "parsetypes.TypeParser.is_decimal": {"tf": 8.54400374531753}, "parsetypes.TypeParser.parse_none": {"tf": 4.47213595499958}, "parsetypes.TypeParser.parse_bool": {"tf": 4.47213595499958}, "parsetypes.TypeParser.parse_int": {"tf": 6.244997998398398}, "parsetypes.TypeParser.parse_float": {"tf": 8.54400374531753}, "parsetypes.TypeParser.parse_decimal": {"tf": 8.774964387392123}, "parsetypes.TypeParser.infer": {"tf": 8.831760866327848}, "parsetypes.TypeParser.infer_series": {"tf": 9.1104335791443}, "parsetypes.TypeParser.infer_table": {"tf": 9.848857801796104}, "parsetypes.TypeParser.convert": {"tf": 11.224972160321824}, "parsetypes.TypeParser.parse": {"tf": 7.810249675906654}, "parsetypes.TypeParser.parse_series": {"tf": 8.54400374531753}, "parsetypes.TypeParser.parse_table": {"tf": 8.888194417315589}, "parsetypes.TypeParser.iterate_table": {"tf": 8.660254037844387}, "parsetypes.reduce_types": {"tf": 11.489125293076057}}, "df": 20, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_int": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_decimal": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.7320508075688772}}, "df": 7}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1.4142135623730951}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 5, "s": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"parsetypes.TypeParser.infer_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.convert": {"tf": 1}}, "df": 1}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2.8284271247461903}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 2}, "parsetypes.TypeParser.is_float": {"tf": 2}, "parsetypes.TypeParser.is_decimal": {"tf": 2}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 19}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 9}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.convert": {"tf": 2}, "parsetypes.TypeParser.parse": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}, "parsetypes.reduce_types": {"tf": 2}}, "df": 11}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2.6457513110645907}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 11}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.convert": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 10}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2.449489742783178}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.is_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.convert": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 20}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2.23606797749979}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.is_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 18}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 3}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.is_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 6}}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2}, "parsetypes.TypeParser.parse_none": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 9}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.is_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 5}}, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.is_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.TypeParser.parse": {"tf": 1}}, "df": 13, "s": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2.23606797749979}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}}, "df": 3}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2.23606797749979}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 7}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 11}, "f": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.is_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 5}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2.23606797749979}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 5}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_decimal": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.7320508075688772}}, "df": 6}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 3}}}}}}, "bases": {"root": {"docs": {}, "df": 0}}, "doc": {"root": {"0": {"1": {"2": {"3": {"docs": {"parsetypes.TypeParser.parse_float": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 8}, "1": {"0": {"0": {"0": {"0": {"docs": {"parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 5}, "2": {"3": {"docs": {"parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"parsetypes.TypeParser.is_float": {"tf": 1}}, "df": 1}, "docs": {"parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_float": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_decimal": {"tf": 2.23606797749979}, "parsetypes.TypeParser.infer_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_series": {"tf": 2}, "parsetypes.TypeParser.parse_table": {"tf": 2}, "parsetypes.TypeParser.iterate_table": {"tf": 2.23606797749979}}, "df": 10}, "2": {"0": {"0": {"0": {"docs": {"parsetypes.TypeParser.parse_int": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "3": {"docs": {}, "df": 0, "e": {"2": {"docs": {"parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 2}, "docs": {"parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 2}}, "docs": {"parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.infer_table": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.convert": {"tf": 2}, "parsetypes.TypeParser.parse": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_series": {"tf": 2}, "parsetypes.TypeParser.parse_table": {"tf": 2}, "parsetypes.TypeParser.iterate_table": {"tf": 2.449489742783178}}, "df": 11, "e": {"3": {"docs": {"parsetypes.TypeParser.parse_int": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}, "3": {"docs": {"parsetypes.TypeParser.infer_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_series": {"tf": 2}, "parsetypes.TypeParser.parse_table": {"tf": 2}, "parsetypes.TypeParser.iterate_table": {"tf": 2}}, "df": 5, "e": {"docs": {"parsetypes.TypeParser.is_float": {"tf": 1}}, "df": 1}}, "4": {"docs": {"parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}}, "df": 3}, "5": {"docs": {"parsetypes.TypeParser.parse_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}}, "df": 2}, "6": {"docs": {"parsetypes.TypeParser.parse_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}}, "df": 2}, "7": {"docs": {"parsetypes.TypeParser.parse_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}}, "df": 2}, "8": {"docs": {"parsetypes.TypeParser.parse_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"parsetypes": {"tf": 4.358898943540674}, "parsetypes.TypeParser": {"tf": 2.449489742783178}, "parsetypes.TypeParser.__init__": {"tf": 11.090536506409418}, "parsetypes.TypeParser.is_none": {"tf": 9.16515138991168}, "parsetypes.TypeParser.is_bool": {"tf": 10.392304845413264}, "parsetypes.TypeParser.is_int": {"tf": 12.449899597988733}, "parsetypes.TypeParser.is_float": {"tf": 12.84523257866513}, "parsetypes.TypeParser.is_decimal": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_none": {"tf": 9.591663046625438}, "parsetypes.TypeParser.parse_bool": {"tf": 9.899494936611665}, "parsetypes.TypeParser.parse_int": {"tf": 11.789826122551595}, "parsetypes.TypeParser.parse_float": {"tf": 14.352700094407323}, "parsetypes.TypeParser.parse_decimal": {"tf": 14.45683229480096}, "parsetypes.TypeParser.infer": {"tf": 9.797958971132712}, "parsetypes.TypeParser.infer_series": {"tf": 11.789826122551595}, "parsetypes.TypeParser.infer_table": {"tf": 11.445523142259598}, "parsetypes.TypeParser.convert": {"tf": 12.36931687685298}, "parsetypes.TypeParser.parse": {"tf": 9.643650760992955}, "parsetypes.TypeParser.parse_series": {"tf": 13.19090595827292}, "parsetypes.TypeParser.parse_table": {"tf": 16.06237840420901}, "parsetypes.TypeParser.iterate_table": {"tf": 15.524174696260024}, "parsetypes.reduce_types": {"tf": 9.433981132056603}}, "df": 22, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes": {"tf": 1.4142135623730951}, "parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}, "parsetypes.reduce_types": {"tf": 1}}, "df": 13}}, "e": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 2}, "parsetypes.TypeParser.__init__": {"tf": 3.605551275463989}, "parsetypes.TypeParser.is_none": {"tf": 2}, "parsetypes.TypeParser.is_bool": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_int": {"tf": 2.23606797749979}, "parsetypes.TypeParser.is_float": {"tf": 3}, "parsetypes.TypeParser.parse_none": {"tf": 2}, "parsetypes.TypeParser.parse_bool": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_int": {"tf": 2.449489742783178}, "parsetypes.TypeParser.parse_float": {"tf": 3.1622776601683795}, "parsetypes.TypeParser.parse_decimal": {"tf": 3.1622776601683795}, "parsetypes.TypeParser.infer": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.infer_series": {"tf": 2.6457513110645907}, "parsetypes.TypeParser.infer_table": {"tf": 2.8284271247461903}, "parsetypes.TypeParser.convert": {"tf": 2}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 2.449489742783178}, "parsetypes.TypeParser.parse_table": {"tf": 4.242640687119285}, "parsetypes.TypeParser.iterate_table": {"tf": 3.4641016151377544}, "parsetypes.reduce_types": {"tf": 2.23606797749979}}, "df": 21, "i": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}}, "df": 3}}, "m": {"docs": {"parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}}, "df": 3}, "n": {"docs": {"parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 2.8284271247461903}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_decimal": {"tf": 2.23606797749979}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 2.449489742783178}, "parsetypes.TypeParser.iterate_table": {"tf": 2}, "parsetypes.reduce_types": {"tf": 1}}, "df": 16}}}, "o": {"docs": {"parsetypes": {"tf": 1.4142135623730951}, "parsetypes.TypeParser": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.__init__": {"tf": 3.3166247903554}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 2.23606797749979}, "parsetypes.TypeParser.is_float": {"tf": 2}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 2}, "parsetypes.TypeParser.parse_float": {"tf": 2.6457513110645907}, "parsetypes.TypeParser.parse_decimal": {"tf": 2.6457513110645907}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 2.449489742783178}, "parsetypes.TypeParser.iterate_table": {"tf": 1.7320508075688772}, "parsetypes.reduce_types": {"tf": 1}}, "df": 19, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.infer_series": {"tf": 2.449489742783178}, "parsetypes.TypeParser.infer_table": {"tf": 2}, "parsetypes.TypeParser.convert": {"tf": 2.6457513110645907}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 2}, "parsetypes.TypeParser.parse_table": {"tf": 2.6457513110645907}, "parsetypes.TypeParser.iterate_table": {"tf": 2.23606797749979}, "parsetypes.reduce_types": {"tf": 2.23606797749979}}, "df": 11, "s": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 2}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}, "parsetypes.reduce_types": {"tf": 3}}, "df": 9}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 18}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.convert": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 2.23606797749979}, "parsetypes.TypeParser.is_int": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_float": {"tf": 2.449489742783178}, "parsetypes.TypeParser.parse_bool": {"tf": 2}, "parsetypes.TypeParser.parse_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_float": {"tf": 2}, "parsetypes.TypeParser.parse_decimal": {"tf": 2}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 2}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 17}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.infer_table": {"tf": 2}, "parsetypes.TypeParser.convert": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 3.4641016151377544}, "parsetypes.TypeParser.iterate_table": {"tf": 3.4641016151377544}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.convert": {"tf": 2.23606797749979}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"parsetypes": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 3}}}, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_none": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_bool": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_int": {"tf": 2}, "parsetypes.TypeParser.parse_float": {"tf": 2.449489742783178}, "parsetypes.TypeParser.parse_decimal": {"tf": 2.449489742783178}, "parsetypes.TypeParser.convert": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse": {"tf": 2}, "parsetypes.TypeParser.parse_series": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}}, "df": 12, "r": {"docs": {"parsetypes.TypeParser": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_none": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_bool": {"tf": 2}, "parsetypes.TypeParser.is_int": {"tf": 2.23606797749979}, "parsetypes.TypeParser.is_float": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_none": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_bool": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_int": {"tf": 2}, "parsetypes.TypeParser.parse_float": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_decimal": {"tf": 2.23606797749979}, "parsetypes.TypeParser.infer": {"tf": 2}, "parsetypes.TypeParser.infer_series": {"tf": 2}, "parsetypes.TypeParser.infer_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.convert": {"tf": 2}, "parsetypes.TypeParser.parse": {"tf": 2}, "parsetypes.TypeParser.parse_series": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}}, "df": 19}, "d": {"docs": {"parsetypes.TypeParser.parse_none": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_bool": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_int": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 9}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 5}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 19}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 4}}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 3}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 12}}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes": {"tf": 1.4142135623730951}, "parsetypes.TypeParser": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.__init__": {"tf": 2}, "parsetypes.TypeParser.parse_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer_table": {"tf": 2}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1.7320508075688772}}, "df": 13, "m": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 5}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 2.8284271247461903}, "parsetypes.TypeParser.is_float": {"tf": 2.8284271247461903}, "parsetypes.TypeParser.is_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 3}, "parsetypes.TypeParser.parse_decimal": {"tf": 2}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1.7320508075688772}}, "df": 11, "s": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_bool": {"tf": 2}, "parsetypes.TypeParser.is_int": {"tf": 2}, "parsetypes.TypeParser.is_float": {"tf": 2}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 15}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 3}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 3}, "l": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.infer_series": {"tf": 2.6457513110645907}, "parsetypes.TypeParser.convert": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_series": {"tf": 2.8284271247461903}}, "df": 3}}}}, "t": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 3}}}}}, "s": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}, "e": {"docs": {"parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 6}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 3.7416573867739413}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}}, "df": 8}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}}, "df": 7}}}}}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_bool": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_float": {"tf": 2}, "parsetypes.TypeParser.parse_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_bool": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_float": {"tf": 2}, "parsetypes.TypeParser.parse_decimal": {"tf": 2}, "parsetypes.TypeParser.infer": {"tf": 1}}, "df": 8}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser.is_none": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_bool": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_none": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_bool": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_int": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_float": {"tf": 2}, "parsetypes.TypeParser.parse_decimal": {"tf": 2}, "parsetypes.TypeParser.infer": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.convert": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse": {"tf": 1.4142135623730951}}, "df": 13, "s": {"docs": {"parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 2.6457513110645907}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.infer_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}}, "df": 16}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2.6457513110645907}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.reduce_types": {"tf": 1}}, "df": 7}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}}, "df": 6}}}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 7}}}, "o": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 2}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 1}}, "df": 2}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 2.449489742783178}, "parsetypes.TypeParser.is_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 3.7416573867739413}}, "df": 5}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_bool": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_float": {"tf": 2}, "parsetypes.TypeParser.parse_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_bool": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_float": {"tf": 2}, "parsetypes.TypeParser.parse_decimal": {"tf": 2}, "parsetypes.TypeParser.parse_table": {"tf": 1}}, "df": 8}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}}, "df": 7}}}}}}, "o": {"docs": {"parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2.449489742783178}}, "df": 1, "s": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}}, "df": 7}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}}, "df": 7, "s": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 18}, "e": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}}, "df": 2}}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 3}}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 2}}, "df": 6, "d": {"docs": {"parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}}, "df": 7}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.iterate_table": {"tf": 2}}, "df": 3, "s": {"docs": {"parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 7, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 1}}, "df": 2}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 3}}}}, "f": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.__init__": {"tf": 3.1622776601683795}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.infer_table": {"tf": 2}, "parsetypes.TypeParser.parse_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 2.8284271247461903}, "parsetypes.TypeParser.iterate_table": {"tf": 2.449489742783178}, "parsetypes.reduce_types": {"tf": 1}}, "df": 20}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}}, "df": 7, "l": {"docs": {}, "df": 0, "y": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}}, "df": 5}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}}, "df": 1}}, "e": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 9}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}}, "df": 2, "d": {"docs": {"parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 2}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.convert": {"tf": 2}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}}, "df": 8}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser": {"tf": null}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 6}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}}, "df": 2}, "d": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes.TypeParser.infer_table": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_table": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.iterate_table": {"tf": 1.7320508075688772}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 4}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 6, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}}, "df": 6}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 3.7416573867739413}, "parsetypes.TypeParser.is_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_bool": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_float": {"tf": 2}, "parsetypes.TypeParser.parse_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_bool": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_float": {"tf": 2}, "parsetypes.TypeParser.parse_decimal": {"tf": 2}}, "df": 8, "s": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 3}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}}, "df": 5, "s": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}}, "df": 4}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}}, "i": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}}, "df": 2, "n": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2.6457513110645907}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer_table": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 2}, "parsetypes.TypeParser.iterate_table": {"tf": 1.7320508075688772}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 16, "f": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_float": {"tf": 2.449489742783178}, "parsetypes.TypeParser.parse_decimal": {"tf": 2.449489742783178}}, "df": 5, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.infer": {"tf": 2}, "parsetypes.TypeParser.infer_series": {"tf": 2}, "parsetypes.TypeParser.infer_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.convert": {"tf": 2}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 8, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser": {"tf": 1}}, "df": 1}, "d": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer_table": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 6}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.7320508075688772}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 5}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1, "d": {"docs": {"parsetypes": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}}, "df": 5}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_int": {"tf": 2.449489742783178}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.reduce_types": {"tf": 2}}, "df": 10, "o": {"docs": {"parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 5}, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 6}}}, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}, "parsetypes.reduce_types": {"tf": 1}}, "df": 10}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 3}}}}}}}, "s": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 5}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.convert": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 1}}}}, "s": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2}, "parsetypes.TypeParser.is_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_bool": {"tf": 2.23606797749979}, "parsetypes.TypeParser.is_int": {"tf": 2.8284271247461903}, "parsetypes.TypeParser.is_float": {"tf": 3.1622776601683795}, "parsetypes.TypeParser.is_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_float": {"tf": 2}, "parsetypes.TypeParser.parse_decimal": {"tf": 2}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 2.23606797749979}, "parsetypes.TypeParser.iterate_table": {"tf": 2}, "parsetypes.reduce_types": {"tf": 1}}, "df": 17}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}, "t": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}}, "df": 12, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 2}, "o": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "s": {"docs": {"parsetypes.TypeParser.parse": {"tf": 1}}, "df": 1}}, "f": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_float": {"tf": 2.449489742783178}, "parsetypes.TypeParser.parse_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_bool": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_int": {"tf": 2}, "parsetypes.TypeParser.parse_float": {"tf": 2.8284271247461903}, "parsetypes.TypeParser.parse_decimal": {"tf": 2.8284271247461903}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 18}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {"parsetypes": {"tf": 1.4142135623730951}, "parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 3.1622776601683795}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_float": {"tf": 2.449489742783178}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_int": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_float": {"tf": 2.449489742783178}, "parsetypes.TypeParser.parse_decimal": {"tf": 2.449489742783178}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 2.449489742783178}, "parsetypes.TypeParser.iterate_table": {"tf": 2.23606797749979}, "parsetypes.reduce_types": {"tf": 2}}, "df": 21, "n": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 2}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_table": {"tf": 1}}, "df": 8, "d": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.__init__": {"tf": 2.8284271247461903}, "parsetypes.TypeParser.is_bool": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_int": {"tf": 2}, "parsetypes.TypeParser.parse_float": {"tf": 2}, "parsetypes.TypeParser.parse_decimal": {"tf": 2}, "parsetypes.TypeParser.convert": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 2.6457513110645907}, "parsetypes.TypeParser.iterate_table": {"tf": 2}}, "df": 16}, "y": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.convert": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 4}}}}}}}}}}, "s": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 2}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 2}, "parsetypes.TypeParser.parse_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_bool": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_float": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_decimal": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 2}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 16, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1.7320508075688772}}, "df": 2}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser": {"tf": 1}}, "df": 1}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}}, "df": 2}}}, "c": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}}, "df": 12}, "l": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 3}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.7320508075688772}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 5}}}}}}}, "t": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 2}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.7320508075688772}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 10}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}}, "df": 6}}, "l": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 7, "o": {"docs": {}, "df": 0, "w": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 2}, "parsetypes.TypeParser.is_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.7320508075688772}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.is_decimal": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.7320508075688772}}, "df": 5, "e": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}}, "df": 4}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"parsetypes.TypeParser.convert": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.__init__": {"tf": 3}, "parsetypes.TypeParser.is_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_bool": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_int": {"tf": 2}, "parsetypes.TypeParser.is_float": {"tf": 2}, "parsetypes.TypeParser.parse_none": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_bool": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_int": {"tf": 2.449489742783178}, "parsetypes.TypeParser.parse_float": {"tf": 2.6457513110645907}, "parsetypes.TypeParser.parse_decimal": {"tf": 2.6457513110645907}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer_table": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.convert": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 2.23606797749979}, "parsetypes.TypeParser.iterate_table": {"tf": 1.7320508075688772}, "parsetypes.reduce_types": {"tf": 1.7320508075688772}}, "df": 21, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 4}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2}, "parsetypes.TypeParser.is_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_bool": {"tf": 2.449489742783178}, "parsetypes.TypeParser.parse_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_bool": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 11, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}}, "df": 2}}}}}}}, "y": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_decimal": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 10}, "u": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 4}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 3}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.infer_series": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 16}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2.6457513110645907}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 2}, "parsetypes.TypeParser.is_float": {"tf": 2}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_table": {"tf": 1}}, "df": 9}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1.4142135623730951}}, "df": 7}}, "n": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 14}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 8, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes": {"tf": 1}}, "df": 1, "s": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.TypeParser.parse": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 18}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}}, "df": 4}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 6}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 5}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 2}, "parsetypes.TypeParser.iterate_table": {"tf": 2.23606797749979}, "parsetypes.reduce_types": {"tf": 1}}, "df": 5}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}}, "df": 5}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}}, "df": 3}, "r": {"docs": {}, "df": 0, "y": {"docs": {"parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}}, "df": 2}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"parsetypes.TypeParser.is_float": {"tf": 1}}, "df": 1}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 6}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"parsetypes": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 5, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2.449489742783178}, "parsetypes.TypeParser.is_none": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_none": {"tf": 2.449489742783178}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}}, "df": 6}}, "t": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 12, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 9}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 6}}}}}}}, "e": {"docs": {}, "df": 0, "w": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_int": {"tf": 2}, "parsetypes.TypeParser.is_float": {"tf": 2}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 2}, "parsetypes.TypeParser.parse_decimal": {"tf": 2}}, "df": 6}}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.iterate_table": {"tf": 1.7320508075688772}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 4}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_float": {"tf": 2}, "parsetypes.TypeParser.parse_float": {"tf": 2.449489742783178}, "parsetypes.TypeParser.parse_decimal": {"tf": 2.449489742783178}}, "df": 4}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 6}}}}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes": {"tf": 1}}, "df": 1, "n": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2.449489742783178}, "parsetypes.TypeParser.is_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 2}, "parsetypes.TypeParser.parse_bool": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_int": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}}, "df": 16, "s": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 3.872983346207417}, "parsetypes.TypeParser.is_none": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.is_bool": {"tf": 2}, "parsetypes.TypeParser.is_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_float": {"tf": 2.23606797749979}, "parsetypes.TypeParser.parse_none": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_bool": {"tf": 2}, "parsetypes.TypeParser.parse_float": {"tf": 2.6457513110645907}, "parsetypes.TypeParser.parse_decimal": {"tf": 2.6457513110645907}, "parsetypes.TypeParser.infer_series": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.infer_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.convert": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 2}, "parsetypes.TypeParser.parse_table": {"tf": 2.23606797749979}, "parsetypes.TypeParser.iterate_table": {"tf": 1.7320508075688772}, "parsetypes.reduce_types": {"tf": 1}}, "df": 17}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}, "parsetypes.TypeParser.parse_none": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.convert": {"tf": 1}}, "df": 7}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.convert": {"tf": 1.4142135623730951}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2.6457513110645907}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 4, "s": {"docs": {"parsetypes": {"tf": 1}, "parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.infer": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 5}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 2}, "parsetypes.TypeParser.is_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_int": {"tf": 2}, "parsetypes.TypeParser.parse_float": {"tf": 1.7320508075688772}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.7320508075688772}}, "df": 5, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser": {"tf": 1}, "parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 6}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}}, "df": 7, "e": {"docs": {}, "df": 0, "s": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 1}, "parsetypes.TypeParser.is_bool": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_none": {"tf": 1}, "parsetypes.TypeParser.parse_bool": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_decimal": {"tf": 1.4142135623730951}}, "df": 7}}}}}, "h": {"docs": {"parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.7320508075688772}}, "df": 1}}, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 2.23606797749979}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {"parsetypes.TypeParser.__init__": {"tf": 1.4142135623730951}}, "df": 1, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.is_float": {"tf": 1}, "parsetypes.TypeParser.parse_int": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.parse_float": {"tf": 1}, "parsetypes.TypeParser.parse_decimal": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 8}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.reduce_types": {"tf": 1}}, "df": 1}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"parsetypes.TypeParser.is_none": {"tf": 2}, "parsetypes.TypeParser.is_bool": {"tf": 2.449489742783178}, "parsetypes.TypeParser.is_int": {"tf": 2.8284271247461903}, "parsetypes.TypeParser.is_float": {"tf": 2.8284271247461903}, "parsetypes.TypeParser.parse_none": {"tf": 2}, "parsetypes.TypeParser.parse_bool": {"tf": 2}, "parsetypes.TypeParser.parse_int": {"tf": 2.449489742783178}, "parsetypes.TypeParser.parse_float": {"tf": 3.4641016151377544}, "parsetypes.TypeParser.parse_decimal": {"tf": 3.4641016151377544}, "parsetypes.TypeParser.infer": {"tf": 2.449489742783178}, "parsetypes.TypeParser.infer_series": {"tf": 4.242640687119285}, "parsetypes.TypeParser.infer_table": {"tf": 4.242640687119285}, "parsetypes.TypeParser.convert": {"tf": 2.449489742783178}, "parsetypes.TypeParser.parse": {"tf": 2.8284271247461903}, "parsetypes.TypeParser.parse_series": {"tf": 5.477225575051661}, "parsetypes.TypeParser.parse_table": {"tf": 5.477225575051661}, "parsetypes.TypeParser.iterate_table": {"tf": 4.898979485566356}}, "df": 17}}}}, "x": {"docs": {"parsetypes.TypeParser.is_int": {"tf": 2}, "parsetypes.TypeParser.is_float": {"tf": 2}, "parsetypes.TypeParser.parse_int": {"tf": 2}, "parsetypes.TypeParser.parse_float": {"tf": 2}, "parsetypes.TypeParser.parse_decimal": {"tf": 2}}, "df": 5}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"parsetypes.TypeParser.infer_series": {"tf": 1}, "parsetypes.TypeParser.infer_table": {"tf": 1}, "parsetypes.TypeParser.parse_series": {"tf": 1}, "parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}, "parsetypes.reduce_types": {"tf": 1}}, "df": 6}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 2}}}}}}}, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.iterate_table": {"tf": 1}}, "df": 1, "s": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1}, "parsetypes.TypeParser.iterate_table": {"tf": 1.4142135623730951}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"parsetypes.TypeParser.parse_table": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();