[tox]
min_version = 3.4
requires = tox-extras ~= 0.0.1
# `tox_extras =` will install dependencies without the main package based on extras defined in pyproject.toml
suicide_timeout = 0.1
interrupt_timeout = 0.4
terminate_timeout = 0.5
skip_missing_interpreters = true

# env_list defines the default environments to run with tox's legacy command (`tox` or `tox -p`)

env_list = main, py3{9,10,11}, awaitpy, metadata, package
labels =
	test = main
	testall = main, py3{9,10,11}
	docs = docs
	metadata = metadata
	package = package, testpackage
	testpackage = testpackage
	prepare = main, py3{9,10,11}, awaitpy, docs, metadata, package, testpackage
	clean = clean
	testpublish = testpublish-noparallel
	publish = publish-noparallel

# Each label is associated with one or more environments to run.
# Each extras defined in pyproject.toml should have one label matching it
# There can be additional labels, for tasks without any package dependencies
# Tox should be run by specifying labels, and not environments directly:
#   `tox r -m <label>` or `tox run -m <label>`
#   `tox p -m <label>` or `tox run-parallel -m <label>`


[testenv]
# Tests that require installing the package; default
skip_install = false
no_package = false

[task]
# Additional tasks that work on other files and do not require installing the package
skip_install = true
no_package = true

[await]
# No-op for syncing dependencies
skip_install = true
no_package = true
ignore_outcome = true


[testenv:main]
description = Test in the locally installed Python version (writes to main directory)
tox_extras = test
commands =
	coverage run -m pytest
	coverage report --fail-under=90
	coverage html

[testenv:py3{9,10,11}]
description = Test different Python versions
tox_extras = test
commands =
	coverage run --data-file={env_dir}/.coverage -m pytest
	coverage report --data-file={env_dir}/.coverage --fail-under=90

[testenv:awaitpy]
description = Consolidate tests for different Python versions
depends = main, py3{9,10,11}
base = await

[testenv:docs]
description = Generate documentation
depends = awaitpy
base = task
tox_extras = docs
allowlist_externals = rm, find
commands_pre = rm -rf docs/html/
commands = pdoc src/parsetypes -o docs/html -t docs/templates --favicon favicon.png --edit-url parsetypes='https://github.com/yushiyangk/parsetypes/blob/main/src/parsetypes/'
commands_post = find docs/html -type d -exec cp docs/templates/favicon.png "{}" ";"
parallel_show_output = true

[testenv:metadata]
description = Check package metadata
depends = awaitpy
base = task
tox_extras = metadata
commands = pyroma .
parallel_show_output = true

[testenv:package]
description = Generate packages (writes to main directory)
depends = awaitpy, metadata, docs
base = task
tox_extras = package
allowlist_externals = rm
commands_pre = rm -rf dist/ parsetypes.egg-info/
commands = python -m build
commands_post = rm -rf parsetypes.egg-info/

[testenv:testpackage]
description = Check packages
depends = package
base = task
tox_extras = packagetest
commands = twine check dist/*
parallel_show_output = true

# Non-default tasks are given below.
# Some of them are probably very dangerous.

[testenv:clean]
description = Remove all artefacts
base = task
allowlist_externals = rm
commands = rm -rf .coverage htmlcov/ build/ dist/ docs/html/ parsetypes.egg-info/

[testenv:testpublish-noparallel]
description = Publish package to TestPyPI (WARNING: this can only be done once without changing the version number)
depends = packagetest
base = task
tox_extras = publish
commands_pre =
	python -c 'print("This task cannot be run in parallel mode.")'
	python -c 'import itertools as i; from os import linesep as n; s="Confirm? [y/N] "; p=i.chain(["Publishing to TestPyPI:"+n+"  Warning: this cannot be overwritten and cannot be undone."+n+s],i.repeat(s)); r=next(filter(lambda x:not x or x[0] in "yn",map(str.lower,map(str.strip,map(input,p))))); exit(r!="y")'  # Confirmation prompt
commands = twine upload -r testpypi dist/*
ignore_errors = false
parallel_show_output = true

[testenv:publish-noparallel]
description = Publish package to PyPI (WARNING: this can only be done once without changing the version number)
depends = packagetest
base = task
tox_extras = publish
commands_pre = python -c 'import itertools as i; from os import linesep as n; s="Confirm? [y/N] "; p=i.chain(["Publishing to PyPI:"+n+"  Warning: this cannot be overwritten and cannot be undone."+n+s],i.repeat(s)); r=next(filter(lambda x:not x or x[0] in "yn",map(str.lower,map(str.strip,map(input,p))))); exit(r!="y")'  # Confirmation prompt
commands = twine upload dist/*
ignore_errors = false
parallel_show_output = true
